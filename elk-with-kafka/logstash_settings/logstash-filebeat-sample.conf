input {

 beats {
   port => 5044
 }

 tcp {
   port => 6044
   codec => json_lines
 }

}

filter {

#  grok {
#    match => { "message" => "%{:log_timestamp} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes} %{NUMBER:duration}" }
#  }

#http://grokdebug.herokuapp.com/

  if [fields][log_type] == "oracle_alert_log" {

    grok {
      match => { "message" => "(?<log_timestamp>[A-Z][a-z]{2} [0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} [0-9]{4})(\n(?<log_msg>[^\r]+))?" }
      #match => { "message" => "%{GREEDYDATA:log_timestamp}(\n(?<log_msg>[^\r]+))?" }
    }

    date {
      match => ["log_timestamp", "MMM dd HH:mm:ss yyyy"]
      timezone => "Etc/GMT-8"
      #timezone => "Asia/Hong_Kong"
      target => "@timestamp"
    }

    mutate {
     copy => { "log_msg" => "message" }
      remove_field => [ "log_timestamp", "log_msg" ]
    }

  } else if [fields][log_type] =~ /^.+_cron_log$/ {

    grok {
      match => { "message" => "^(\{|\[)(?<log_timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})(\}|\]) ((?<log_message>[^\r]+))?" }
    }

    grok {
      match => { "source" => "[^0-9]+_(?<log_date>[0-9\.]{10}).+" }
    }

    date {
      match => ["log_timestamp", "yyyy-MM-dd HH:mm:ss"]
      timezone => "Etc/GMT-8"
      #timezone => "Asia/Hong_Kong"
      target => "@timestamp"
    }

    mutate {
     copy => { "log_message" => "message" }
     remove_field => [ "log_timestamp", "log_message" ]
    }

  } else if [fields][log_type] == "tomcat_access_log" {

    grok {
      match => { "message" => "%{IP:client} - - \[%{GREEDYDATA:log_time} %{GREEDYDATA:tz}\] %{QUOTEDSTRING:request_message} %{NUMBER:http_code} (?<duration>(\-|[0-9]+))" }
      remove_field => [ "message" ]
    }

    mutate {
        gsub => ["request_message","\"",""]
    }

    grok {
      match => { "request_message" => "%{WORD:method} %{URIPATHPARAM:url} %{WORD:protocal}/%{NUMBER:version}" }
      remove_field => [ "request_message" ]
    }

    mutate {
        gsub => ["duration", "-", "0"]
        convert => ["duration", "float"]
    }
 
    date {
      match => ["log_time", "dd/MMM/yyyy:HH:mm:ss"]
      #timezone => "Asia/Hong_Kong"
      timezone => "Etc/GMT+4"
      target => "@timestamp"
    }

  } else if [fields][log_type] == "cdb_ui_log" {

    grok {
      match => { "message" => "\[(?<log_timestamp>.{23}) %{WORD:log_level}\s?\] \[(?<thread_name>[^\s]+)\] (?<package_name>[^\s]+) - (?<log_msg>.+(\n.+)*)" }
      remove_field => [ "message" ]
    }

    if [log_msg] =~ /elapsed time \d+ ms/ {
      grok{
        match => { "log_msg" => "(User '%{WORD:user}')?.+with path \[(?<comp_path>[^\]]+)+\].* elapsed time %{NUMBER:duration} ms" }
      }
      mutate {
       convert => { "duration" => "integer" }
      }
    }

    #timezone is UTC-400
    date {
      match => ["log_timestamp", "yyyy-MM-dd HH:mm:ss SSS"]
      timezone => "Etc/GMT+4"
      target => "@timestamp"
    }

  }

}

output {

  elasticsearch {
    codec => "json"
    hosts => ["elasticsearch:9200"]
    index => "%{[fields][log_type]}_%{+YYYY}"
    workers => 1
    flush_size => 20000
    idle_flush_time => 10
  }

#  stdout {
#   codec=>rubydebug
#  }


# kafka {
#    bootstrap_servers => "192.168.11.60:9091,192.168.11.60:9092,192.168.11.60:9093"
#    acks => "all"
#    topic_id => "%{[fields][log_type]}"
#    compression_type => "snappy"
#  }


}

